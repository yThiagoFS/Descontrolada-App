@page "/"
@inject HttpClient _client

<PageTitle>Home</PageTitle>

<h1 class="text-center">Listagem de produtos cadastrados</h1>

@if(_PaginatedProductsViewModel is not null && _PaginatedProductsViewModel.Data.Any()) 
{
    <span><strong>Total de itens: </strong>@(_PaginatedProductsViewModel?.TotalItems)</span>
    <table class="table">
    <thead class="thead-dark">
        <tr>
        <th scope="col">Id</th>
        <th scope="col">Nome</th>
        <th scope="col">Descrição</th>
        <th scope="col">Preço</th>
        <th scope="col">Tipo do produto</th>
        <th scope="col">Quantidade em estoque</th>
        <th scope="col">Data de criação</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var product in _PaginatedProductsViewModel!.Data)
        {
            <tr>
                <th>@product.Id</th>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price.ToString("C2")</td>
                <td>@product.ProductType</td>
                <td>@product.StockQuantity</td>
                <td>@product.CreatedAt.ToString("dd/MM/yyyy")</td>
            </tr>
        }
    </tbody>
    </table>
    <div class="btn-container">
        <button class="navigation-btn @_previusBtnClass" @onclick="@PreviousPage">Anterior</button>
        <span>@_pageIndex / @_PaginatedProductsViewModel.TotalPages</span>
        <button class="navigation-btn @_nextBtnClass" @onclick="@NextPage">Próximo</button>
    </div>
}
else if(_PaginatedProductsViewModel is null && !Error.HasError)
{
    <div class="text-center">Carregando os produtos...</div>
}
else 
{
    <div class="text-center">Atualize a página e tente novamente.</div>
}

@code 
{
    [CascadingParameter]
    public Error Error { get; set; }
    private PaginatedItemsViewModel<ProductViewModel> _PaginatedProductsViewModel;
    
    private int _pageSize = 5;
    private int _skip = 0;
    private int _pageIndex = 1;
    private string _previusBtnClass => GetPaginationBtnClass(_pageIndex > 1);
    private string _nextBtnClass => GetPaginationBtnClass(_pageIndex < _PaginatedProductsViewModel.TotalPages);

    protected override async Task  OnInitializedAsync()
    {
        await LoadPage();
    }
    
    private async Task NextPage() 
    {
        if(_pageIndex < _PaginatedProductsViewModel.TotalPages)
        {
            _pageIndex++;
            _skip += _pageSize;
            await LoadPage();
        }
    }

    private async Task PreviousPage() 
    {
        if(_pageIndex > 1)
        {
            _pageIndex--;
            _skip -= _pageSize;
            await LoadPage();
        }
    }

    private async Task LoadPage()
    {
        _PaginatedProductsViewModel = await GetProducts();
        StateHasChanged();
    }

    private async Task<PaginatedItemsViewModel<ProductViewModel>> GetProducts()
    {
        try
        {
            Error.ClearErrors();
            
            var baseURL = $"products?skip={_skip}&take={_pageSize}";
            var response = await _client.GetFromJsonAsync<ResponseBase<PaginatedResponseDTO<ProductViewModel>>>(baseURL);

            if(!response?.IsSuccess ?? true) 
            {
                if(response is null) 
                    Error.ProccessError("Algo de errado aconteceu ao tentar se comunicar com o servidor.");
                else 
                    Error.ProccessError(response!.Errors);

                return null!;
            }

            var totalCount = response!.Data.TotalCount;
            var data = response!.Data.Items;

            return new(_pageIndex, _pageSize, (int)totalCount, data);
        }
        catch(Exception ex) 
        {
            Error.ProccessError($"Algo de inesperado aconteceu ao tentar renderizar os produtos. Por favor, atualize a página e tente novamente. Erro: {ex.Message}");

            return null!;
        }
    }

    private string GetPaginationBtnClass(bool condition)
        => condition ? "active-btn" : "disabled-btn";
}

